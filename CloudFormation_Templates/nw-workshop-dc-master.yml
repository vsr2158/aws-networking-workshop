AWSTemplateFormatVersion: "2010-09-09"
Description: "VPC template for simulated on-prem environment. "
Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  SshAccessCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))$
    Description: CIDR range permitted to SSH into the Bastion host.
    Type: String
    Default: 0.0.0.0/0
  SshInstanceType:
    AllowedValues:
    - t2.nano
    - t2.micro
    - t3.nano
    - t3.micro
    Default: t2.micro
    Description: Bastion EC2 instance type.
    Type: String
  Tunnel1Ip:
    Description: Enter the IP address for Tunnel 1 for the VPN connection
    Type: String
    Default: 1.1.1.1
  Tunnel2Ip:
    Description: Enter the IP address for Tunnel 1 for the VPN connection
    Type: String
    Default: 2.2.2.2
  CgwAs:
    Description: Enter AS Number specified on the Transit Gateway
    Type: String
    Default: 65000
  TgwAs:
    Description: Enter AS Number specified on the Transit Gateway
    Type: String
    Default: 64512
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 192.168.0.0/24
    Description: CIDR block for the VPC
    Type: String
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremVpc-', !Ref 'AWS::StackName' ] ]
  PublicSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 0, !Cidr [ !Ref  VpcCidr, 2, 7 ]]
      #CidrBlock: !Ref PublicSubnet0Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremPublicSubnet-', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Public
      VpcId: !Ref Vpc

  PrivateSubnet0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select [ 1, !Cidr [ !Ref  VpcCidr, 2, 7 ]]
      #CidrBlock: !Ref PrivateSubnet0Cidr
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremPrivateSubnet-', !Ref 'AWS::StackName' ] ]
        - Key: SubnetType
          Value: Private
      VpcId: !Ref Vpc

  PrivateSubnetRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref NatRouteTable0
      SubnetId: !Ref PrivateSubnet0

  PublicRouteTableAssociation0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet0
      RouteTableId: !Ref PublicRouteTable

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremInternetGateway-', !Ref 'AWS::StackName' ] ]
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachInternetGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremPublicRouteTable-', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Public
      VpcId: !Ref Vpc

  NatEIP0:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway0:
    Type: AWS::EC2::NatGateway
    DependsOn: AttachInternetGateway
    Properties:
      AllocationId: !GetAtt NatEIP0.AllocationId
      SubnetId: !Ref PublicSubnet0
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremNatGateway-', !Ref 'AWS::StackName' ] ]
  NatRoute0:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref NatRouteTable0
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway0
  NatRouteTable0:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '', ['OnPremNatRouteTable-', !Ref 'AWS::StackName' ] ]
        - Key: Network
          Value: Private
      VpcId: !Ref Vpc

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      RouteTableIds:
        - !Ref NatRouteTable0
        - !Ref PublicRouteTable
      VpcId: !Ref Vpc
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.s3"

  AppServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for app server
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "OnPremAppServerSecurityGroup-${AWS::StackName}"
      VpcId:
        !Ref Vpc

  DnsServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for DNS server
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 53
          ToPort: 53
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "OnPremDnsServerSecurityGroup-${AWS::StackName}"
      VpcId:
        !Ref Vpc

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Bastion instances
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: 8
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SshAccessCidr
      Tags:
        - Key: Name
          Value: !Sub "OnPremBastionSecurityGroup-${AWS::StackName}"
      VpcId:
        !Ref Vpc

  DhcpOptions:
    Type: AWS::EC2::DHCPOptions
    DependsOn: DnsServer
    Properties:
      DomainName: "example.corp"
      DomainNameServers:
      - !GetAtt DnsServer.PrivateIp
      Tags:
        - Key: Name
          Value: !Sub "DhcpOptions-${AWS::StackName}"

  AttachDhcpOptions:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref Vpc

  AppServer:
    Type: AWS::EC2::Instance
    DependsOn: NatRoute0
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref SshInstanceType
      #KeyName: !Ref SshKeyName
      SecurityGroupIds:
        - !Ref AppServerSecurityGroup
      SubnetId: !Ref PrivateSubnet0
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # install updates
          yum update -y

          # configure password based logon via SSH
          sudo su
          /bin/echo 'pa55w0rd' | /bin/passwd ec2-user --stdin
          sed -i  '/PasswordAuthentication/d' /etc/ssh/sshd_config
          sed -i  '/PermitRootLogin/d' /etc/ssh/sshd_config
          echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config
          echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config
          systemctl restart sshd
          #

          # configure AWS CLI for ec2-user
          mkdir /home/ec2-user/.aws
          cat > /home/ec2-user/.aws/config<< EOF
          [default]
          region = ${AWS::Region}
          EOF

          chown -r ec2-user:ec2-user /home/ec2-user/.aws

          # set up web server
          yum install -y httpd
          echo "Hello, world." > /var/www/html/index.html
          systemctl enable httpd.service
          systemctl start httpd.service
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremAppServer-', !Ref 'AWS::StackName' ] ]

  DnsServer:
    Type: AWS::EC2::Instance
    DependsOn: AppServer
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: "PT30M"
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref SshInstanceType
      #KeyName: !Ref SshKeyName
      SecurityGroupIds:
        - !Ref DnsServerSecurityGroup
      SubnetId: !Ref PrivateSubnet0
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          # install updates
          yum update -y

          # configure AWS CLI for ec2-user
          mkdir /home/ec2-user/.aws
          cat > /home/ec2-user/.aws/config<< EOF
          [default]
          region = ${AWS::Region}
          EOF

          chown -r ec2-user:ec2-user /home/ec2-user/.aws

          # configure password based logon via SSH
          sudo su
          /bin/echo 'pa55w0rd' | /bin/passwd ec2-user --stdin
          sed -i  '/PasswordAuthentication/d' /etc/ssh/sshd_config
          sed -i  '/PermitRootLogin/d' /etc/ssh/sshd_config
          echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config
          echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config
          systemctl restart sshd
          #

          # set up DNS server
          yum install -y bind

          # replace named.conf
          cat > /etc/named.conf<< EOF
          options {
            directory       "/var/named";
            dump-file       "/var/named/data/cache_dump.db";
            statistics-file "/var/named/data/named_stats.txt";
            memstatistics-file "/var/named/data/named_mem_stats.txt";
            recursing-file  "/var/named/data/named.recursing";
            secroots-file   "/var/named/data/named.secroots";

            recursion yes;

            allow-query { any; };

            dnssec-enable no;
            dnssec-validation no;

            bindkeys-file "/etc/named.root.key";

            managed-keys-directory "/var/named/dynamic";

            pid-file "/run/named/named.pid";
            session-keyfile "/run/named/session.key";

            forwarders {
                    169.254.169.253;
            };
            forward first;
          };

          logging {
            channel default_debug {
                  file "data/named.run";
                  severity dynamic;
            };
          };


          zone "." IN {
                  type hint;
                  file "named.ca";
          };

          zone "example.corp" IN {
                  type master;
                  file "/etc/named/example.corp";
                  allow-update { none; };
          };

          include "/etc/named.rfc1912.zones";
          include "/etc/named.root.key";

          EOF

          # build zone file with my IP address and AppSercer IP.
          ORIGIN='$ORIGIN'
          APPIP='${AppServer.PrivateIp}'
          MYIP=$( curl -s http://169.254.169.254/latest/meta-data/local-ipv4 )

          cat > /etc/named/example.corp<< EOF
          $ORIGIN example.corp.
          @                      3600 SOA   ns.example.corp. (
                                        zone-admin.example.com.     ; address of responsible party
                                        2020050701                 ; serial number
                                        3600                       ; refresh period
                                        600                        ; retry period
                                        604800                     ; expire time
                                        1800                     ) ; minimum ttl
                                86400 NS    ns1.example.corp.
          myapp                    60 IN A  $APPIP
          ns1                      60 IN A  $MYIP
          EOF

          # activate DNS server
          systemctl enable named.service
          systemctl start named.service

          # set up as local DNS resolver
          cat > /etc/resolv.conf<< EOF
          search example.corp
          nameserver $MYIP
          EOF

          # signal CFN that we are ready. We want our DNS server to be up before launching the next instance.
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource DnsServer --region ${AWS::Region}

      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremDnsServer-', !Ref 'AWS::StackName' ] ]

  BastionHost:
    Type: AWS::EC2::Instance
    DependsOn:
    - PublicRoute
    - AttachDhcpOptions
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref SshInstanceType
      #KeyName: !Ref SshKeyName
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet0
      SourceDestCheck: false
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            # configure password based logon via SSH
            sudo su
            /bin/echo 'pa55w0rd' | /bin/passwd ec2-user --stdin
            sed -i  '/PasswordAuthentication/d' /etc/ssh/sshd_config
            sed -i  '/PermitRootLogin/d' /etc/ssh/sshd_config
            echo 'PasswordAuthentication yes' >> /etc/ssh/sshd_config
            echo 'PermitRootLogin yes' >> /etc/ssh/sshd_config
            systemctl restart sshd
            yum update -y
            yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
            amazon-linux-extras install epel
            yum install -y strongswan quagga
            groupadd -r quagga
            groupadd -r quaggavt
            useradd -r -g quagga quagga
            cp /usr/share/doc/quagga-*/zebra.conf.sample /etc/quagga/zebra.conf
            cp /usr/share/doc/quagga-*/bgpd.conf.sample /etc/quagga/bgpd.conf
            chown -R quagga:quagga /etc/quagga
            systemctl enable zebra
            systemctl enable bgpd
            echo "net.ipv4.ip_forward = 1" >> /etc/sysctl.conf
            sysctl -p /etc/sysctl.conf
            PUBLICIP=$(curl -s http://169.254.169.254/2018-09-24/meta-data/public-ipv4)
            PRIVATEIP=$(curl -s http://169.254.169.254/2018-09-24/meta-data/local-ipv4)
            PublicIp=$(curl -s http://169.254.169.254/2018-09-24/meta-data/public-ipv4)
            PrivateIp=$(curl -s http://169.254.169.254/2018-09-24/meta-data/local-ipv4)
            CgwAs='${CgwAs}'
            TgwAs='${TgwAs}'
            VpcCidr='${VpcCidr}'
            Tunnel1Ip='${Tunnel1Ip}'
            Tunnel2Ip='${Tunnel2Ip}'
            cat <<EOT >/etc/strongswan/ipsec.conf
            conn %default
              leftauth=psk
              rightauth=psk
              ike=aes128-sha1-modp1024!
              ikelifetime=28800s
              aggressive=no
              esp=aes128-sha1-modp1024!
              type=tunnel
              dpddelay=10s
              dpdtimeout=30s
              keyexchange=ikev1
              rekey=yes
              reauth=no
              dpdaction=restart
              closeaction=restart
              leftsubnet=0.0.0.0/0
              rightsubnet=0.0.0.0/0
              leftupdown=/etc/ipsec-vti.sh
              installpolicy=yes
              compress=no
              mobike=no

            conn dc2aws1
              left=$PrivateIp
              leftid=$PublicIp
              right=$Tunnel1Ip
              rightid=$Tunnel1Ip
              auto=start
              mark=100

            conn dc2aws2
              left=$PrivateIp
              leftid=$PublicIp
              right=$Tunnel2Ip
              rightid=$Tunnel2Ip
              auto=start
              mark=200

            EOT
            cat <<EOT >/etc/quagga/bgpd.conf
            hostname bgpd
            password zebra
            log stdout
            !
            router bgp $CgwAs
            bgp router-id 192.168.0.190
            network $VpcCidr
            neighbor 169.254.10.1 remote-as $TgwAs
            neighbor 169.254.11.1 remote-as $TgwAs
            !
            line vty
            !

            EOT
            cat <<'EOT' >>/etc/ipsec-vti.sh
            IP=$(which ip)
            IPTABLES=$(which iptables)

            PLUTO_MARK_OUT_ARR=(${!PLUTO_MARK_OUT//// })
            PLUTO_MARK_IN_ARR=(${!PLUTO_MARK_IN//// })
            case "${!PLUTO_CONNECTION}" in
              dc2aws1)
                VTI_INTERFACE=vti1
                VTI_LOCALADDR=169.254.10.2/30
                VTI_REMOTEADDR=169.254.10.1/30
                ;;
              dc2aws2)
                VTI_INTERFACE=vti2
                VTI_LOCALADDR=169.254.11.2/30
                VTI_REMOTEADDR=169.254.11.1/30
                ;;
              dc2aws3)
                VTI_INTERFACE=vti3
                VTI_LOCALADDR=169.254.12.2/30
                VTI_REMOTEADDR=169.254.12.1/30
                ;;
              dc2aws4)
                VTI_INTERFACE=vti4
                VTI_LOCALADDR=169.254.13.2/30
                VTI_REMOTEADDR=169.254.13.1/30
                ;;
            esac

            case "${!PLUTO_VERB}" in
              up-client)
                ${!IP} link add ${!VTI_INTERFACE} type vti local ${!PLUTO_ME} remote ${!PLUTO_PEER} okey ${!PLUTO_MARK_OUT_ARR[0]} ikey ${!PLUTO_MARK_IN_ARR[0]}
                sysctl -w net.ipv4.conf.${!VTI_INTERFACE}.disable_policy=1
                sysctl -w net.ipv4.conf.${!VTI_INTERFACE}.rp_filter=2 || sysctl -w net.ipv4.conf.${!VTI_INTERFACE}.rp_filter=0
                ${!IP} addr add ${!VTI_LOCALADDR} remote ${!VTI_REMOTEADDR} dev ${!VTI_INTERFACE}
                ${!IP} link set ${!VTI_INTERFACE} up mtu 1436
                ${!IPTABLES} -t mangle -I FORWARD -o ${!VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
                ${!IPTABLES} -t mangle -I INPUT -p esp -s ${!PLUTO_PEER} -d ${!PLUTO_ME} -j MARK --set-xmark ${!PLUTO_MARK_IN}
                ${!IP} route flush table 220
                ;;
              down-client)
                ${!IP} link del ${!VTI_INTERFACE}
                ${!IPTABLES} -t mangle -D FORWARD -o ${!VTI_INTERFACE} -p tcp -m tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
                ${!IPTABLES} -t mangle -D INPUT -p esp -s ${!PLUTO_PEER} -d ${!PLUTO_ME} -j MARK --set-xmark ${!PLUTO_MARK_IN}
                ;;
            esac

            sysctl -w net.ipv4.ip_forward=1
            sysctl -w net.ipv4.conf.eth0.disable_xfrm=1
            sysctl -w net.ipv4.conf.eth0.disable_policy=1

            EOT
            chmod +x /etc/ipsec-vti.sh
            echo "$PublicIp $PrivateIp : PSK \"awsamazon\"" >> /etc/strongswan/ipsec.secrets
            systemctl enable strongswan
            systemctl enable bgpd
            systemctl restart strongswan
            systemctl restart bgpd
      Tags:
        - Key: Name
          Value: !Join [ '', [ 'OnPremBastion-', !Ref 'AWS::StackName' ] ]

Outputs:

  Vpc:
    Value: !Ref Vpc
  VpcCidr:
    Value: !Ref VpcCidr
  PublicSubnet0:
    Value: !Ref PublicSubnet0
  PrivateSubnet0:
    Value: !Ref PrivateSubnet0
  BastionSecurityGroup:
    Value: !Ref BastionSecurityGroup
  PublicIp:
    Value: !GetAtt BastionHost.PublicIp
  AppServerPrivateIp:
    Value: !GetAtt AppServer.PrivateIp
  DnsServerPrivateIp:
    Value: !GetAtt DnsServer.PrivateIp
